
'''
‚ùì PROMPT
Given a binary tree with node values represented as integers, find and return the most frequent node value.

You can assume there will always be a most frequent node and no ties.

Example(s)
    5 <--- root
print(findMostFrequentNodeValue(root) == 5)

    5 <--- root
 10   5
print(findMostFrequentNodeValue(root) == 5)

    6 <--- root
  6   6
 6 6
print(findMostFrequentNodeValue(root) == 6)
 

üîé EXPLORE
List your assumptions & discoveries:
Q: Will there always be a most frequent node?
A: Yes.
Q: What should I do as a tiebreaker?
A: For simplicity, there's always a single value that occurs most frequently.
Q: What if the tree is empty?
A: For simplicity, assume the tree is non-empty.

Insightful & revealing test cases:
1-node tree
all nodes have same value
all unique except 1 node
a sparse tree

üß† BRAINSTORM
What approaches could work?
Algorithm 1:
Time: O(N)
Space: O(N)
 

üìÜ PLAN
Outline of algorithm #: 
-Create a hashmap to store frequencies (key = node value, value = frequency).
-DFS or BFS through your tree using a helper function, incrementing frequencies in your hashmap as you go.
-After you're done recording frequencies - iterate through your hashmap to find node value with the largest frequency and return that node value (key).
'''

class TreeNode:
    def __init__(self, value = 0, left = None, right = None):
        self.value = value
        self.left = left
        self.right = right

# üõ†Ô∏è IMPLEMENT
# function findMostFrequentNodeValue(root) {
# def findMostFrequentNodeValue(root: Node) -> int:
def findMostFrequentNodeValue(root: TreeNode) -> int:
    if root is None:
        return None

    # Step 1: Create a hashmap to store frequencies
    frequency = {}

    # Step 2: DFS helper function to traverse the tree and update frequencies.  processes left and right children
    def dfs(node: TreeNode):
        if node is None:
            return
        if node.value in frequency:
            frequency[node.value] += 1
        else:
            frequency[node.value] = 1
        dfs(node.left)
        dfs(node.right)
    
    # Perform DFS traversal
    dfs(root)

    # Step 3: Find the most frequent node value
    most_frequent_value = max(frequency, key=frequency.get) #finds key with highest freq
    return most_frequent_value

def findMostFrequentNodeValueBFS(root: TreeNode) -> int:    
    if root is None:
        return None
    
    # Step 1: Create a hashmap to store frequencies
    frequency = {}

    # Step 2: BFS traversal using a list as a queue to update frequencies
    queue = [root]
    
    while queue:
        node = queue.pop(0)
        
        if node.value in frequency:
            frequency[node.value] += 1
        else:
            frequency[node.value] = 1
        
        if node.left:
            queue.append(node.left)
        if node.right:
            queue.append(node.right)
    
    # Step 3: Find the most frequent node value
    most_frequent_value = max(frequency, key=frequency.get)
    return most_frequent_value
  


# üß™ VERIFY
# Run tests. Methodically debug & analyze issues.
root = TreeNode(5)
print(findMostFrequentNodeValue(root) == 5)

#    5
# 10   5
root = TreeNode(5,
  TreeNode(10),
  TreeNode(5))
print(findMostFrequentNodeValue(root) == 5)

#    6
#  6   6
# 6 6
root = TreeNode(6,
  TreeNode(6,
    TreeNode(6),
    TreeNode(6)),
  TreeNode(6))
print(findMostFrequentNodeValue(root) == 6)

#     5
#  10   1
# 1  7
root = TreeNode(5,
  TreeNode(10,
    TreeNode(1),
    TreeNode(7)),
  TreeNode(1))
print(findMostFrequentNodeValue(root) == 1)

#      5
#   2    1
# 3   7   10
#          10
root = TreeNode(5,
  TreeNode(2,
    TreeNode(3),
    TreeNode(7)),
  TreeNode(1,
    None,
    TreeNode(10,
      None,
      TreeNode(10))))
print(findMostFrequentNodeValue(root) == 10)

#       1
#      2
#     3
#    4
#   5
#  6
# 3
root = TreeNode(1,
  TreeNode(2,
    TreeNode(3,
      TreeNode(4,
        TreeNode(5,
          TreeNode(6,
            TreeNode(3)))))))
print(findMostFrequentNodeValue(root) == 3)
