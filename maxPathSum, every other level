# Binary trees are already defined with this interface:
class TreeNode:
    def __init__(self, value=0, left=None, right=None):
        self.value = value
        self.left = left
        self.right = right

def solution(root):
    maxPathSum = float('-inf')
    
    def dfs(node, level):
        nonlocal maxPathSum
        if not node:
            return 0
        
        leftPathSum = dfs(node.left, level + 1)
        rightPathSum = dfs(node.right, level + 1)
        
        if level % 2 == 0:  # Return max path sum including node value for even levels
            return max(node.value + max(leftPathSum, rightPathSum), 0)
        else:  # Return max path sum for odd levels without node value
            return max(leftPathSum, rightPathSum, 0)

    return dfs(root, 0)
    

# Binary Tree 1
root = TreeNode(
    value=1,
    left=TreeNode(
        value=9,
        left=TreeNode(
            value=2
        )
    ),
    right=TreeNode(
        value=3,
        right=TreeNode(
            value=3,
            right=TreeNode(
                value=10
            )
        )
    )
)

# Binary Tree 2
root2 = TreeNode(
    value=1,
    left=TreeNode(
        value=9,
        left=TreeNode(
            value=2
        )
    ),
    right=TreeNode(
        value=3,
        right=TreeNode(
            value=3
        )
    )
)
print(solution(root),4)
print(solution(root2),4)
